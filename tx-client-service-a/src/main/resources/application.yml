info:
  app:
    name: tx-client-service-a-name
    description: tx-client-service-a-des
    version: 1.0.0.100

server:
  port: 9980
  servlet:
    context-path: "/tx-client-service-a"

spring:
  application:
    name: tx-client-service-a
  profiles:
    active: dev
  datasource:
    druid:
      #flyway使用这个参数,mysql/oracle
      db-type: mysql

      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://192.168.223.129:3306/milepost_auth_1?useUnicode=true&characterEncoding=utf8&characterSetResults=utf8&serverTimezone=GMT%2B8
      username: root
      password: admin123

      initial-size: 5
      max-active: 20
      min-idle: 5
      max-wait: 60000
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      #和上面的等价
      #max-open-prepared-statements:
      validation-query: SELECT 1 FROM DUAL
      #validation-query-timeout:
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      #max-evictable-idle-time-millis:
      #配置多个英文逗号分隔
      #filters:
  redis:
    jedis:
      pool:
        #配置连接池属性
        max-active: 20
        min-idle: 10
        max-idle: 20
        max-wait: 2000
    #配置redis服务器属性
    database: 1
    host: 192.168.223.129
    port: 6379
    #password: bomc
    #redis连接超时时间，单位毫秒
    timeout: 2000
  flyway:
    enabled: false

eureka:
  client:
    service-url:
      defaultZone: http://192.168.223.129:8761/eureka/
      #defaultZone: http://172.16.1.208:8761/eureka/
  instance:
    ip-address: 192.168.223.1
    #${eureka.instance.ip-address}:${spring.application.name}:${server.port}
    #instance-id: xxx

#为了EurekaServer更灵敏而加的
#eureka.instance.lease-renewal-interval-in-seconds: 4
#eureka.instance.lease-expiration-duration-in-seconds: 7

#multiple-tenant:
#  tenant: abc
#  weight: 1
#  label-and: aa,bb
#  label-or: aa

#multiple-tenant:
#  tenant: abc
#  weight: 9
#  label-and: aa,bb

#multiple-tenant:
#  tenant: abc
#  weight: 0
#  label-and: aa,bb

multiple-tenant:
  tenant: tenant1
  weight: 9
  label-and: aa,bb
  label-or: dd,ee,ff




# 使用yml配置seata有一下两个bug
# 1、undo相关配置不生效（估计seata.client.rm.lock相关属性也有类似问题），解决：我们不更改这些配置就可以了，
# 2、service.disable-global-transaction不生效，解决：在类路径下放一个file.conf，里面只配置service.disable-global-transaction。
#
#seata:
#  enabled: true
#  #application-id: tx-client-service-a
#  tx-service-group: default # 事务群组（可以每个应用独立取名，也可以使用相同的名字）
#  client:
#    rm-report-success-enable: true
#    # 自动刷新缓存中的表结构（默认false）
#    rm-table-meta-check-enable: false
#    # 一阶段结果上报TC重试次数（默认5）
#    rm-report-retry-count: 5
#    # 异步提交缓存队列长度（默认10000）
#    rm-async-commit-buffer-limit: 10000
#    rm:
#      lock:
#        # 校验或占用全局锁重试间隔（默认10ms）
#        lock-retry-interval: 10
#        # 校验或占用全局锁重试次数（默认30）
#        lock-retry-times: 30
#        # 分支事务与其它全局回滚事务冲突时锁策略（优先释放本地锁让回滚成功）
#        lock-retry-policy-branch-rollback-on-conflict: true
#    # 一阶段全局提交结果上报TC重试次数（默认1次，建议大于1）
#    tm-commit-retry-count: 5
#    # 一阶段全局回滚结果上报TC重试次数（默认1次，建议大于1）
#    tm-rollback-retry-count: 5
#    undo:
#      # 二阶段回滚镜像校验（默认true开启）
#      undo-data-validation: true
#      # undo序列化方式（默认jackson）
#      undo-log-serialization: jackson
#      # 自定义undo表名（默认undo_log）
#      undo-log-table: undo_log
#    log:
#      # 日志异常输出概率（默认100）
#      exceptionRate: 100
#    support:
#      spring:
#        # auto proxy the DataSource bean，必须设置成true，否则不能生成undo_log，也不能回滚，
#        datasource-autoproxy: true
#  service:
#    # TC 集群（必须与seata-server保持一致）
#    vgroup-mapping: seata-server
#    # 降级开关
#    enable-degrade: false
#    # 禁用全局事务（默认false）
#    disable-global-transaction: false
#    #only support when registry.type=file, please don't set multiple addresses
#    grouplist: 127.0.0.1:8091
#  transport:
#    shutdown:
#      # when destroy server, wait seconds
#      wait: 3
#    #thread factory for netty
#    thread-factory:
#      boss-thread-prefix: NettyBoss
#      worker-thread-prefix: NettyServerNIOWorker
#      server-executor-thread-prefix: NettyServerBizHandler
#      share-boss-worker: false
#      client-selector-thread-prefix: NettyClientSelector
#      client-selector-thread-size: 1
#      client-worker-thread-prefix: NettyClientWorkerThread
#      # netty boss thread size,will not be used for UDT
#      boss-thread-size: 1
#      #auto default pin or 8
#      worker-thread-size: 8
#    # tcp udt unix-domain-socket
#    type: TCP
#    #NIO NATIVE
#    server: NIO
#    #enable heartbeat
#    heartbeat: true
#    serialization: seata
#    compressor: none
#    # the client batch send request enable
#    enable-client-batch-send-request: true # 客户端事务消息请求是否批量合并发送（默认true）
#  registry:
#    type: eureka
#    eureka:
#      service-url: ${eureka.client.service-url.defaultZone}
##      application: default
##      weight: 1
##  config:
##    file:
##      name: file.conf
##    type: file




#
dist-transaction:
  enabled: true