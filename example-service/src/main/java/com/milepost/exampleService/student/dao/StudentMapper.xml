<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.milepost.exampleService.student.dao.StudentMapper" >
  <resultMap id="BaseResultMap" type="com.milepost.exampleApi.entity.student.Student" >
    <id column="ID" property="id" jdbcType="VARCHAR" />
    <result column="NAME" property="name" jdbcType="VARCHAR" />
    <result column="STU_NO" property="stuNo" jdbcType="VARCHAR" />
    <result column="BIRTH" property="birth" jdbcType="TIMESTAMP" />
    <result column="SCORE" property="score" jdbcType="REAL" />
    <result column="REMARK" property="remark" jdbcType="VARCHAR" />
    <result column="CLASSES_ID" property="classesId" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, NAME, STU_NO, BIRTH, SCORE, REMARK, CLASSES_ID
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.milepost.exampleApi.entity.student.StudentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from student
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from student
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.milepost.exampleApi.entity.student.StudentExample" >
    delete from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.milepost.exampleApi.entity.student.Student" >
    insert into student (ID, NAME, STU_NO,
    BIRTH, SCORE, REMARK,
    CLASSES_ID)
    values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{stuNo,jdbcType=VARCHAR},
    #{birth,jdbcType=TIMESTAMP}, #{score,jdbcType=REAL}, #{remark,jdbcType=VARCHAR},
    #{classesId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.milepost.exampleApi.entity.student.Student" >
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="name != null" >
        NAME,
      </if>
      <if test="stuNo != null" >
        STU_NO,
      </if>
      <if test="birth != null" >
        BIRTH,
      </if>
      <if test="score != null" >
        SCORE,
      </if>
      <if test="remark != null" >
        REMARK,
      </if>
      <if test="classesId != null" >
        CLASSES_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="stuNo != null" >
        #{stuNo,jdbcType=VARCHAR},
      </if>
      <if test="birth != null" >
        #{birth,jdbcType=TIMESTAMP},
      </if>
      <if test="score != null" >
        #{score,jdbcType=REAL},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="classesId != null" >
        #{classesId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.milepost.exampleApi.entity.student.StudentExample" resultType="java.lang.Integer" >
    select count(*) from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update student
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null" >
        NAME = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.stuNo != null" >
        STU_NO = #{record.stuNo,jdbcType=VARCHAR},
      </if>
      <if test="record.birth != null" >
        BIRTH = #{record.birth,jdbcType=TIMESTAMP},
      </if>
      <if test="record.score != null" >
        SCORE = #{record.score,jdbcType=REAL},
      </if>
      <if test="record.remark != null" >
        REMARK = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.classesId != null" >
        CLASSES_ID = #{record.classesId,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update student
    set ID = #{record.id,jdbcType=VARCHAR},
    NAME = #{record.name,jdbcType=VARCHAR},
    STU_NO = #{record.stuNo,jdbcType=VARCHAR},
    BIRTH = #{record.birth,jdbcType=TIMESTAMP},
    SCORE = #{record.score,jdbcType=REAL},
    REMARK = #{record.remark,jdbcType=VARCHAR},
    CLASSES_ID = #{record.classesId,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.milepost.exampleApi.entity.student.Student" >
    update student
    <set >
      <if test="name != null" >
        NAME = #{name,jdbcType=VARCHAR},
      </if>
      <if test="stuNo != null" >
        STU_NO = #{stuNo,jdbcType=VARCHAR},
      </if>
      <if test="birth != null" >
        BIRTH = #{birth,jdbcType=TIMESTAMP},
      </if>
      <if test="score != null" >
        SCORE = #{score,jdbcType=REAL},
      </if>
      <if test="remark != null" >
        REMARK = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="classesId != null" >
        CLASSES_ID = #{classesId,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.milepost.exampleApi.entity.student.Student" >
    update student
    set NAME = #{name,jdbcType=VARCHAR},
    STU_NO = #{stuNo,jdbcType=VARCHAR},
    BIRTH = #{birth,jdbcType=TIMESTAMP},
    SCORE = #{score,jdbcType=REAL},
    REMARK = #{remark,jdbcType=VARCHAR},
    CLASSES_ID = #{classesId,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <!--禁用缓存，否则测试多数据源时候效果不明显-->
  <!--<cache type="org.mybatis.caches.ehcache.EhcacheCache" />-->

  <!-- 这里不能设置参数类型 parameterType="java.lang.String" ，否则会报错 -->
  <select id="selectByClassesId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from student
    where CLASSES_ID = #{classesId} order by BIRTH asc
  </select>

  <select id="testMapUnderscoreToCamelCase" resultType="com.milepost.exampleApi.entity.student.Student">
    select * from STUDENT
    <where>
      <if test="id != null" > ID = #{id} </if>
      <if test="name != null" > AND NAME = #{name} </if>
      <if test="score != null" > AND SCORE = #{score} </if>
    </where>
  </select>

  <select id="testMultiTableSelect" resultType="com.milepost.exampleApi.entity.student.Student"
          parameterType="com.milepost.exampleApi.entity.student.Student">
    SELECT S.*, C.ID "classes.id", C.NAME "classes.name"
    FROM STUDENT S
    LEFT JOIN CLASSES C
    ON S.CLASSES_ID = C.ID
    <where>
      <if test="example.id != null" > S.NAME = #{example.id} </if>
      <if test="example.name != null" > S.NAME LIKE #{example.name} </if>
      <if test="example.stuNo != null" > AND S.STU_NO = #{example.stuNo} </if>
      <if test="example.score != null" > AND S.SCORE = #{example.score} </if>
      <if test="example.birth != null" > AND S.BIRTH > #{example.birth} </if>
      <if test="example.classes != null">
        <if test="example.classes.id != null" > AND C.ID = #{example.classes.id} </if>
        <if test="example.classes.name != null" > AND C.NAME LIKE #{example.classes.name} </if>
      </if>
    </where>
    ORDER BY S.SCORE ASC
  </select>
</mapper>